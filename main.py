import logging
import os
import urllib.parse
from datetime import datetime, timedelta
from typing import Dict, List, Optional

import requests
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ApplicationBuilder,
)
from fastapi import FastAPI, Request, HTTPException
import uvicorn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OZON_CLIENT_ID = os.getenv('OZON_CLIENT_ID')
OZON_API_KEY = os.getenv('OZON_API_KEY')
PORT = int(os.getenv('PORT', 10000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([TELEGRAM_TOKEN, OZON_CLIENT_ID, OZON_API_KEY]):
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_TOKEN, OZON_CLIENT_ID –∏ OZON_API_KEY")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
OZON_API_URL = "https://api-seller.ozon.ru"
STORE_URL = "https://www.ozon.ru/seller/gabagool"
ITEMS_PER_PAGE = 5

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
class ProductCache:
    def __init__(self, ttl_minutes: int = 30):
        self.cache: Dict = {}
        self.ttl = timedelta(minutes=ttl_minutes)
        self.last_update: Optional[datetime] = None

    def is_valid(self) -> bool:
        if not self.last_update:
            return False
        return datetime.now() - self.last_update < self.ttl

    def update(self, products: List[Dict]):
        self.cache = {str(i): product for i, product in enumerate(products)}
        self.last_update = datetime.now()

    def get_products(self) -> Dict:
        return self.cache

product_cache = ProductCache()

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
bot = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

async def fetch_ozon_products() -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö —á–µ—Ä–µ–∑ Ozon API"""
    headers = {
        "Client-Id": OZON_CLIENT_ID,
        "Api-Key": OZON_API_KEY,
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.post(
            f"{OZON_API_URL}/v2/product/list",
            headers=headers,
            json={"filter": {"visibility": "ALL"}}
        )
        response.raise_for_status()
        return response.json()["result"]["items"]
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Ozon API: {e}")
        return []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ—Å—Ç–µ—Ä–æ–≤ Gabagool!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/catalog - –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "/store - —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –Ω–∞ Ozon\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"
    )
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "‚Ä¢ /catalog - –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ /store - —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –Ω–∞ Ozon\n"
        "‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–í –∫–∞—Ç–∞–ª–æ–≥–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n"
        "‚Ä¢ –£–∑–Ω–∞–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Ç–æ–≤–∞—Ä–∞–º –Ω–∞ Ozon"
    )
    await update.message.reply_text(help_text)

async def store(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /store"""
    await update.message.reply_text(
        f"üõç –ù–∞—à –º–∞–≥–∞–∑–∏–Ω –Ω–∞ Ozon:\n{STORE_URL}"
    )

async def catalog(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog"""
    if not product_cache.is_valid():
        products = await fetch_ozon_products()
        product_cache.update(products)
    
    products = product_cache.get_products()
    if not products:
        await update.message.reply_text("üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    keyboard = []
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    
    for i in range(start_idx, min(end_idx, len(products))):
        product = products[str(i)]
        status = "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if product.get("stock", 0) > 0 else "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        keyboard.append([
            InlineKeyboardButton(
                f"{product['name']} - {status}",
                callback_data=f"product_{i}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
    if end_idx < len(products):
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìö –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data.startswith("page_"):
        page = int(query.data.split("_")[1])
        await catalog(update, context, page)
    elif query.data.startswith("product_"):
        product_id = int(query.data.split("_")[1])
        products = product_cache.get_products()
        product = products.get(str(product_id))
        
        if product:
            message = (
                f"üé§ {product['name']}\n\n"
                f"üí∞ –¶–µ–Ω–∞: {product.get('price', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} ‚ÇΩ\n"
                f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {product.get('stock', 0)} —à—Ç.\n\n"
                f"üîó –°—Å—ã–ª–∫–∞: {product.get('url', STORE_URL)}"
            )
            if product.get('image_url'):
                await query.message.reply_photo(
                    photo=product['image_url'],
                    caption=message
                )
            else:
                await query.message.reply_text(message)
        else:
            await query.message.reply_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

# FastAPI —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
@app.post("/webhook/{token:path}")
async def webhook(token: str, request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ–±—Ö—É–∫ —Å —Ç–æ–∫–µ–Ω–æ–º: {token}")
    decoded_token = urllib.parse.unquote(token)
    logger.info(f"–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: '{decoded_token}'")
    logger.info(f"–û–∂–∏–¥–∞–µ–º—ã–π —Ç–æ–∫–µ–Ω: '{TELEGRAM_TOKEN}'")
    if decoded_token == TELEGRAM_TOKEN:
        try:
            update = Update.de_json(await request.json(), bot)
            if update is None:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram")
                raise HTTPException(status_code=400, detail="Invalid update")
            await bot.process_update(update)
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return {"status": "ok"}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            raise HTTPException(status_code=500, detail=f"Error processing update: {str(e)}")
    else:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–µ–±—Ö—É–∫–∞: {decoded_token}")
        raise HTTPException(status_code=401, detail="Invalid token")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
bot.add_handler(CommandHandler("start", start))
bot.add_handler(CommandHandler("help", help_command))
bot.add_handler(CommandHandler("store", store))
bot.add_handler(CommandHandler("products", catalog))
bot.add_handler(CallbackQueryHandler(button_callback))

if __name__ == "__main__":
    if os.getenv("RENDER"):
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ Render")
        try:
            bot.initialize()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application
            logger.info("Application —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            bot.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                url_path=f"/webhook/{TELEGRAM_TOKEN}",
                webhook_url=f"{WEBHOOK_URL}"
            )
            logger.info(f"–í–µ–±—Ö—É–∫ –∑–∞–ø—É—â–µ–Ω –Ω–∞ {WEBHOOK_URL}")
            uvicorn.run(app, host="0.0.0.0", port=PORT)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
            raise
    else:
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling")
        bot.initialize()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è polling
        bot.run_polling(allowed_updates=Update.ALL_TYPES)
