import os
import requests
import json
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OZON_CLIENT_ID = os.getenv("OZON_CLIENT_ID")
OZON_API_KEY = os.getenv("OZON_API_KEY")

# –ë–∞–∑–æ–≤—ã–π URL Ozon API
OZON_API_URL = "https://api-seller.ozon.ru"

# –ü—Ä–æ—Å—Ç–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
PRODUCT_CACHE = {}
CACHE_DURATION = 3600  # –ö—ç—à –Ω–∞ 1 —á–∞—Å

def fetch_ozon_products():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å Ozon API —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    global PRODUCT_CACHE
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    if PRODUCT_CACHE.get("timestamp", 0) + CACHE_DURATION > current_time:
        return PRODUCT_CACHE.get("data", [])
    
    headers = {
        "Client-Id": OZON_CLIENT_ID,
        "Api-Key": OZON_API_KEY,
        "Content-Type": "application/json"
    }
    payload = {
        "filter": {"visibility": "ALL"},
        "page": 1,
        "page_size": 100
    }
    try:
        response = requests.post(f"{OZON_API_URL}/v2/product/info/list", json=payload, headers=headers)
        response.raise_for_status()
        products = response.json().get("result", [])
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
        PRODUCT_CACHE = {"data": products, "timestamp": current_time}
        return products
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ozon API: {e}")
        return []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gabagool Poster Store! üé®\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–µ—Ä–æ–≤, /store –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    )

async def catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    products = fetch_ozon_products()
    if not products:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return

    keyboard = []
    for product in products:
        product_id = product.get("id")
        name = product.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–µ—Ä")
        stock = product.get("stocks", {}).get("present", 0)
        status = "–í –Ω–∞–ª–∏—á–∏–∏" if stock > 0 else "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        keyboard.append([InlineKeyboardButton(f"{name} ({status})", callback_data=f"product_{product_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–µ—Ä:", reply_markup=reply_markup)

async def product_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞."""
    query = update.callback_query
    await query.answer()
    
    product_id = query.data.split("_")[1]
    headers = {
        "Client-Id": OZON_CLIENT_ID,
        "Api-Key": OZON_API_KEY,
        "Content-Type": "application/json"
    }
    payload = {"product_id": [product_id]}
    
    try:
        response = requests.post(f"{OZON_API_URL}/v2/product/info", json=payload, headers=headers)
        response.raise_for_status()
        product = response.json().get("result", {})
        
        name = product.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–µ—Ä")
        price = product.get("price", {}).get("price", "N/A")
        stock = product.get("stocks", {}).get("present", 0)
        image = product.get("images", [None])[0]
        ozon_link = product.get("web_url", "https://www.ozon.ru")
        
        message = f"**{name}**\n–¶–µ–Ω–∞: {price} ‚ÇΩ\n–û—Å—Ç–∞—Ç–æ–∫: {stock}\n–°—Å—ã–ª–∫–∞: {ozon_link}"
        if image:
            await query.message.reply_photo(photo=image, caption=message)
        else:
            await query.message.reply_text(message)
    except requests.RequestException as e:
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ: {e}")

async def store(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /store. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞–≥–∞–∑–∏–Ω."""
    await update.message.reply_text(
        "–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –Ω–∞ Ozon: https://www.ozon.ru/seller/gabagool",
        disable_web_page_preview=True
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É."""
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/catalog - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –ø–æ—Å—Ç–µ—Ä–æ–≤\n"
        "/store - –ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –Ω–∞ Ozon\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("catalog", catalog))
    application.add_handler(CommandHandler("store", store))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(product_details, pattern="^product_"))
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()